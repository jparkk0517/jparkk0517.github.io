{"pageProps":{"post":{"meta":{"title":"github blog 구축기(2)","desc":"깃헙블로그로 블로그를 이사한 후기를 공유해보자","date":"2024.02.05","tags":["next.js","github blog","gh-pages","mdx"]},"content":"\n# 블로그 글 작성 및 표출하는 방법은?\n\n- 기본적으로 포스팅은 markdown으로 작성하도록 하고싶다.\n  - 작성 과정에서 markdown으로 글을 확인하고, 그대로 표출되도록 하고싶기 때문\n- 별도 서버 없이 작성한 post markdown파일을 github에 저장하고, 그걸 그대로 표출 하고싶다.\n\n=> mdx 파일로 작성하고, meta 정보를 parsing하여 글 목록에 표출하도록 하고, 표스팅 내용은 dynamic routing으로 확인할 수 있는 구조로 짜도록 하자!\n\n![240205-212509](/posts/2024-02-05/240205-212509.png)\n그림1. src 폴더 하부 구조\n\n기본적인 폴더 구조는 다음과 같이\n/pages 폴더 밑에 [postId].tsx를 두어 dynamic routing이 가능하도록 했다.\n\n# 본격 github page 배포\n\n> gh-pages library를 사용!\n> [gh-pages npm repository](https://www.npmjs.com/package/gh-pages)\n\ngithub page에 내가 작성한 markdown을 포스팅으로 표출하기 위해\ngh-pages를 활용하도록 하고 deploy 스크립트는 다음과 같이 짰다.\n\n```bash\n # package.json\n \"deploy\": \"next build && touch out/.nojekyll && gh-pages -d out --dotfiles\",\n```\n\n이제 yarn deploy 명령어를 통해  \n 연결한 git repository의 gh-pages 브랜치에 빌드된 결과물이 올라가게 된다.  \n 이때 github repository 설정에서 표출할 branch를 gh-pages로 변경시켜준다.\n\n![240205-213613](/posts/2024-02-05/240205-213613.png)\n그림2. github repository settings\n\n![240205-213633](/posts/2024-02-05/240205-213633.png)\n그림3. gh-pages 브랜치를 github page 메인브랜치로 이용하도록 변경\n\n위와같이 설정했다면\nyarn deploy 명령어를 통해 github page가 배포됨을 알 수 있다.\n","fileName":"2024-02-05","route":"2024-02-05"},"prev":{"meta":{"title":"github blog 구축기(1)","desc":"깃헙블로그로 블로그를 이사한 후기를 공유해보자","date":"2024.02.04","tags":["next.js","github blog","gh-pages","mdx"]},"content":"\n# 왜 깃헙 블로그로 이사를 했나\n\n이전에는 notion을 썼다. 노션 자체 기능도 많고, 글 작성도 편리했지만  \n 직접 react로 블로그를 꾸미고, 기능을 추가하는것도 재밌을것 같아 이사를 결심했다.\n\n## 깃헙 블로그 제작을 위해 고려했던것\n\n- static site로 제작하여 별도의 서버구축이 필요없어야 한다.\n- React 문법을 활용하여 작성이 편리하고, 향후 확장에도 용이해야 한다.\n- markdown을 이용해 작성이 가능하고, 표출이 되어야 한다.\n\n## 프레임워크의 선택\n\n깃험블로그를 찾아보니 next.js 와 gatsby 두가지 프레임워크를 많이 채택하는듯 했다.\n사실 두가지를 보자마자 next.js로 구축하고 싶었다.\n애초에 next.js는 익숙하기도 하고, 별다른 러닝커브 없이 빠르게 구축하고 싶었기 때문이다.\n\n따라서 next.js로 선택!\n\n# 본격적 깃헙페이지 제작\n\n## github page 생성\n\n깃헙페이지는 https://{깃헙아이디}.github.io 형태로 이용 할 수 있다.  \n따라서 이 이름으로 repository를 생성한다.\n\n![240203-225036](/posts/2024-02-04/240203-225036.png)  \n( 깃헙아이디 ).github.io 로 레포지토리 생성!!\n\n## next.js 생성 및 설정\n\n```bash\n$ npx create-next-app@latest\n```\n\n```mjs\n// next.config.mjs\nimport createMDX from '@next/mdx';\n\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  // static page들로만 구성하도록 하기 위해 export 설정 추가\n  output: 'export',\n  // github page는 정적 페이지로 구성되기때문에 image에 대하 optimized를 꺼준다\n  images: {\n    unoptimized: false,\n  },\n  assetPrefix: '/',\n  pageExtensions: ['js', 'jsx', 'ts', 'tsx', 'md', 'mdx'],\n};\n\nconst withMDX = createMDX();\n\nexport default withMDX(nextConfig);\n```\n\n위와같이 설정하면 기본적으로 github page에 정적 페이지로 표출될 수 있는 기본 설정이 마무리된다.\n","fileName":"2024-02-04","route":"2024-02-04"},"next":null},"__N_SSG":true}