{"pageProps":{"prev":{"meta":{"title":"github blog 구축기(2)","desc":"github page를 배포하는 과정을 알아보자","date":"2024.02.05","tags":["next.js","github blog","gh-pages","mdx"]},"content":"\n# 블로그 글 작성 및 표출하는 방법은?\n\n- 기본적으로 포스팅은 markdown으로 작성하도록 하고싶다.\n  - 작성 과정에서 markdown으로 글을 확인하고, 그대로 표출되도록 하고싶기 때문\n- 별도 서버 없이 작성한 post markdown파일을 github에 저장하고, 그걸 그대로 표출 하고싶다.\n\n=> mdx 파일로 작성하고, meta 정보를 parsing하여 글 목록에 표출하도록 하고, 표스팅 내용은 dynamic routing으로 확인할 수 있는 구조로 짜도록 하자!\n\n![240205-212509](/posts/2024-02-05/240205-212509.png)\n그림1. src 폴더 하부 구조\n\n기본적인 폴더 구조는 다음과 같이\n/pages 폴더 밑에 [postId].tsx를 두어 dynamic routing이 가능하도록 했다.\n\n# 본격 github page 배포\n\n> gh-pages library를 사용!\n> [gh-pages npm repository](https://www.npmjs.com/package/gh-pages)\n\ngithub page에 내가 작성한 markdown을 포스팅으로 표출하기 위해\ngh-pages를 활용하도록 하고 deploy 스크립트는 다음과 같이 짰다.\n\n```bash\n # package.json\n \"deploy\": \"next build && touch out/.nojekyll && gh-pages -d out --dotfiles\",\n```\n\n이제 yarn deploy 명령어를 통해  \n 연결한 git repository의 gh-pages 브랜치에 빌드된 결과물이 올라가게 된다.  \n 이때 github repository 설정에서 표출할 branch를 gh-pages로 변경시켜준다.\n\n![240205-213613](/posts/2024-02-05/240205-213613.png)\n그림2. github repository settings\n\n![240205-213633](/posts/2024-02-05/240205-213633.png)\n그림3. gh-pages 브랜치를 github page 메인브랜치로 이용하도록 변경\n\n위와같이 설정했다면\nyarn deploy 명령어를 통해 github page가 배포됨을 알 수 있다.\n","fileName":"2024-02-05","route":"2024-02-05"},"post":{"meta":{"title":"github blog 구축기(3)","desc":"mdx를 이용한 포스팅 작성","date":"2024.02.06","tags":["next.js","github blog","gh-pages","mdx"]},"content":"\n# 포스팅의 meta정보 입력\n\n- 포스팅의 meta정보를 통해 포스트 리스트 표출시 정보를 표출해야 한다.\n\n![240207-232027](/posts/2024-02-06/240207-232027.png)\n그림1. .mdx 의 meta정보\n\n> getStaticProps로 post가져오기\n\n```typescript\nimport fs from 'fs';\nimport matter from 'gray-matter';\nimport path from 'path';\n\nexport function getPostIds() {\n  const files = fs\n    .readdirSync(path.join('posts'))\n    .filter((filename) => filename.endsWith('.mdx'))\n    .map((filename) => filename.replaceAll('.mdx', ''));\n  return files;\n}\n\nexport function getPostById(postId: string) {\n  const markdownWithMeta = fs.readFileSync(\n    path.join('posts', postId + '.mdx'),\n    'utf-8'\n  );\n  const { data: meta, content } = matter(markdownWithMeta);\n  return {\n    meta: {\n      title: meta['title'] ?? '',\n      desc: meta['desc'] ?? '',\n      date: meta['date'] ?? '',\n      tags: meta['tags'] ?? [],\n    },\n    content,\n    fileName: postId,\n    route: postId,\n  };\n}\n\nexport const getStaticProps: GetStaticProps = async ({ params }) => {\n  const { postId = '' } = params ?? { postId: '' };\n  const postIds = getPostIds();\n  const idx = postIds.findIndex((_postId) => postId === _postId);\n  let prev = null,\n    post = null,\n    next = null;\n  for (let i = 0; i < postIds.length; i++) {\n    const _postId = postIds[i];\n    if (_postId === postId) {\n      prev = i === 0 ? null : getPostById(postIds[i - 1]);\n      post = getPostById(_postId);\n      next = i + 1 === postIds.length ? null : getPostById(postIds[i + 1]);\n      break;\n    }\n  }\n\n  return {\n    props: {\n      prev,\n      post,\n      next,\n    },\n  };\n};\n```\n\nroot folder에 posts 폴더를 만들고 그 내부에 포스트들을 mdx파일로 생성하고, 그 파일들을 읽도록 했다.\n![240208-020424](/posts/2024-02-06/240208-020424.png)\n그림2. folder 구조 및 posts 폴더\n\n이때 폴더명은 포스트가 작성된 날짜를 기준으로 했고, 그 날짜는 mdx 내부에 적어놓은 meta와 동일하게 맞추었다.\n","fileName":"2024-02-06","route":"2024-02-06"},"next":null},"__N_SSG":true}